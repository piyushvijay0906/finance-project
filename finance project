<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Financial Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.0/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            color: #2d3748;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #718096;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .main-grid {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 30px;
            margin-bottom: 30px;
        }

        .chart-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .expense-form, .goals-section, .alerts-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2d3748;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .expense-list {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .expense-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #e2e8f0;
            transition: background-color 0.3s ease;
        }

        .expense-item:hover {
            background-color: rgba(102, 126, 234, 0.05);
            border-radius: 10px;
            margin: 0 -15px;
            padding: 15px;
        }

        .expense-item:last-child {
            border-bottom: none;
        }

        .expense-details h4 {
            margin-bottom: 5px;
            color: #2d3748;
        }

        .expense-category {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .expense-amount {
            font-size: 1.2rem;
            font-weight: 700;
            color: #e53e3e;
        }

        .goal-item, .alert-item {
            background: rgba(102, 126, 234, 0.05);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid #667eea;
        }

        .goal-progress {
            background: #e2e8f0;
            border-radius: 10px;
            height: 8px;
            margin-top: 10px;
            overflow: hidden;
        }

        .goal-progress-fill {
            background: linear-gradient(135deg, #48bb78, #38a169);
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s ease;
        }

        .alert-item.warning {
            border-left-color: #ed8936;
            background: rgba(237, 137, 54, 0.05);
        }

        .alert-item.danger {
            border-left-color: #e53e3e;
            background: rgba(229, 62, 62, 0.05);
        }

        .prediction-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(102, 126, 234, 0.3);
        }

        .prediction-value {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .prediction-trend {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 15px;
        }

        .trend-arrow {
            font-size: 1.5rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 20px;
            color: #2d3748;
        }

        @media (max-width: 1024px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>💰 AI Financial Dashboard</h1>
            <p>Smart expense tracking with predictive analytics and automated categorization</p>
        </div>

        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value" id="totalBalance">$5,240.50</div>
                <div class="stat-label">Total Balance</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="monthlySpending">$2,145.30</div>
                <div class="stat-label">This Month's Spending</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="budgetLeft">$854.70</div>
                <div class="stat-label">Budget Remaining</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="savingsRate">23%</div>
                <div class="stat-label">Savings Rate</div>
            </div>
        </div>

        <div class="prediction-card">
            <h3>🔮 AI Spending Prediction</h3>
            <div class="prediction-value" id="predictedSpending">$2,680</div>
            <p>Predicted spending for next month</p>
            <div class="prediction-trend">
                <span class="trend-arrow">📈</span>
                <span>15% increase expected based on seasonal trends</span>
            </div>
        </div>

        <div class="main-grid">
            <div class="chart-section">
                <h3 class="section-title">📊 Spending Analytics</h3>
                <canvas id="spendingChart" width="400" height="200"></canvas>
            </div>

            <div class="sidebar">
                <div class="expense-form">
                    <h3 class="section-title">➕ Add Expense</h3>
                    <form id="expenseForm">
                        <div class="form-group">
                            <label for="description">Description</label>
                            <input type="text" id="description" placeholder="Coffee at Starbucks" required>
                        </div>
                        <div class="form-group">
                            <label for="amount">Amount</label>
                            <input type="number" id="amount" step="0.01" placeholder="4.50" required>
                        </div>
                        <div class="form-group">
                            <label for="category">Category (AI Auto-detect)</label>
                            <select id="category">
                                <option value="auto">🤖 Auto-categorize</option>
                                <option value="food">🍔 Food & Dining</option>
                                <option value="transport">🚗 Transportation</option>
                                <option value="shopping">🛍️ Shopping</option>
                                <option value="entertainment">🎬 Entertainment</option>
                                <option value="bills">📄 Bills & Utilities</option>
                                <option value="health">⚕️ Healthcare</option>
                            </select>
                        </div>
                        <button type="submit" class="btn">Add Expense</button>
                    </form>
                </div>

                <div class="goals-section">
                    <h3 class="section-title">🎯 Financial Goals</h3>
                    <div class="goal-item">
                        <h4>Emergency Fund</h4>
                        <p>$3,200 / $5,000</p>
                        <div class="goal-progress">
                            <div class="goal-progress-fill" style="width: 64%"></div>
                        </div>
                    </div>
                    <div class="goal-item">
                        <h4>Vacation Fund</h4>
                        <p>$850 / $2,000</p>
                        <div class="goal-progress">
                            <div class="goal-progress-fill" style="width: 42.5%"></div>
                        </div>
                    </div>
                </div>

                <div class="alerts-section">
                    <h3 class="section-title">⚠️ Smart Alerts</h3>
                    <div class="alert-item warning">
                        <strong>Budget Alert:</strong> You've spent 85% of your dining budget this month.
                    </div>
                    <div class="alert-item danger">
                        <strong>Unusual Spending:</strong> Shopping expenses 40% higher than usual.
                    </div>
                </div>
            </div>
        </div>

        <div class="expense-list">
            <h3 class="section-title">📝 Recent Expenses</h3>
            <div id="expensesList">
                <!-- Expenses will be populated here -->
            </div>
        </div>

        <div class="chart-section">
            <h3 class="section-title">📈 Category Breakdown</h3>
            <canvas id="categoryChart" width="400" height="200"></canvas>
        </div>
    </div>

    <script>
        // AI Financial Dashboard Logic
        class FinancialAI {
            constructor() {
                this.expenses = [
                    { id: 1, description: "Starbucks Coffee", amount: 4.50, category: "food", date: new Date("2025-09-10") },
                    { id: 2, description: "Uber Ride", amount: 15.30, category: "transport", date: new Date("2025-09-09") },
                    { id: 3, description: "Netflix Subscription", amount: 15.99, category: "entertainment", date: new Date("2025-09-08") },
                    { id: 4, description: "Grocery Shopping", amount: 85.20, category: "food", date: new Date("2025-09-07") },
                    { id: 5, description: "Gas Station", amount: 45.00, category: "transport", date: new Date("2025-09-06") }
                ];
                this.budgets = {
                    food: 400,
                    transport: 200,
                    entertainment: 150,
                    shopping: 300,
                    bills: 800,
                    health: 200
                };
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.renderExpenses();
                this.updateStats();
                this.createCharts();
                this.checkAlerts();
            }

            setupEventListeners() {
                document.getElementById('expenseForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.addExpense();
                });
            }

            // AI-powered expense categorization
            categorizeExpense(description) {
                const keywords = {
                    food: ['coffee', 'starbucks', 'restaurant', 'grocery', 'food', 'pizza', 'burger', 'lunch', 'dinner'],
                    transport: ['uber', 'lyft', 'gas', 'fuel', 'parking', 'metro', 'bus', 'taxi'],
                    entertainment: ['netflix', 'spotify', 'movie', 'cinema', 'game', 'concert'],
                    shopping: ['amazon', 'store', 'mall', 'clothes', 'shoes', 'electronics'],
                    bills: ['electric', 'water', 'phone', 'internet', 'rent', 'insurance'],
                    health: ['doctor', 'pharmacy', 'medicine', 'hospital', 'clinic']
                };

                const desc = description.toLowerCase();
                
                for (const [category, words] of Object.entries(keywords)) {
                    if (words.some(word => desc.includes(word))) {
                        return category;
                    }
                }
                
                return 'shopping'; // default category
            }

            addExpense() {
                const description = document.getElementById('description').value;
                const amount = parseFloat(document.getElementById('amount').value);
                let category = document.getElementById('category').value;

                if (category === 'auto') {
                    category = this.categorizeExpense(description);
                    // Show AI categorization feedback
                    this.showAIFeedback(category);
                }

                const expense = {
                    id: this.expenses.length + 1,
                    description,
                    amount,
                    category,
                    date: new Date()
                };

                this.expenses.unshift(expense);
                this.renderExpenses();
                this.updateStats();
                this.updateCharts();
                this.checkAlerts();

                // Reset form
                document.getElementById('expenseForm').reset();
            }

            showAIFeedback(category) {
                const categoryNames = {
                    food: 'Food & Dining',
                    transport: 'Transportation',
                    entertainment: 'Entertainment',
                    shopping: 'Shopping',
                    bills: 'Bills & Utilities',
                    health: 'Healthcare'
                };

                // Create temporary feedback element
                const feedback = document.createElement('div');
                feedback.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: linear-gradient(135deg, #48bb78, #38a169);
                    color: white;
                    padding: 15px 20px;
                    border-radius: 10px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                    z-index: 1000;
                    font-weight: 600;
                `;
                feedback.textContent = `🤖 AI categorized as: ${categoryNames[category]}`;
                document.body.appendChild(feedback);

                setTimeout(() => {
                    feedback.remove();
                }, 3000);
            }

            renderExpenses() {
                const container = document.getElementById('expensesList');
                container.innerHTML = '';

                this.expenses.slice(0, 10).forEach(expense => {
                    const item = document.createElement('div');
                    item.className = 'expense-item';
                    item.innerHTML = `
                        <div class="expense-details">
                            <h4>${expense.description}</h4>
                            <span class="expense-category">${this.getCategoryIcon(expense.category)} ${this.getCategoryName(expense.category)}</span>
                        </div>
                        <div class="expense-amount">-$${expense.amount.toFixed(2)}</div>
                    `;
                    container.appendChild(item);
                });
            }

            getCategoryIcon(category) {
                const icons = {
                    food: '🍔',
                    transport: '🚗',
                    entertainment: '🎬',
                    shopping: '🛍️',
                    bills: '📄',
                    health: '⚕️'
                };
                return icons[category] || '💰';
            }

            getCategoryName(category) {
                const names = {
                    food: 'Food & Dining',
                    transport: 'Transportation',
                    entertainment: 'Entertainment',
                    shopping: 'Shopping',
                    bills: 'Bills & Utilities',
                    health: 'Healthcare'
                };
                return names[category] || 'Other';
            }

            updateStats() {
                const totalExpenses = this.expenses.reduce((sum, exp) => sum + exp.amount, 0);
                const currentBalance = 5240.50 - totalExpenses;
                const monthlyBudget = 3000;
                const budgetLeft = monthlyBudget - totalExpenses;
                const savingsRate = Math.max(0, Math.round((budgetLeft / monthlyBudget) * 100));

                document.getElementById('totalBalance').textContent = `$${currentBalance.toFixed(2)}`;
                document.getElementById('monthlySpending').textContent = `$${totalExpenses.toFixed(2)}`;
                document.getElementById('budgetLeft').textContent = `$${budgetLeft.toFixed(2)}`;
                document.getElementById('savingsRate').textContent = `${savingsRate}%`;

                // Update prediction
                this.updatePrediction(totalExpenses);
            }

            updatePrediction(currentSpending) {
                // Simple AI prediction based on current trends
                const daysInMonth = 30;
                const currentDay = new Date().getDate();
                const dailyAverage = currentSpending / currentDay;
                const predicted = dailyAverage * daysInMonth;
                const increase = Math.round(((predicted - currentSpending) / currentSpending) * 100);

                document.getElementById('predictedSpending').textContent = `$${Math.round(predicted)}`;
                
                const trendElement = document.querySelector('.prediction-trend span:last-child');
                if (increase > 0) {
                    trendElement.textContent = `${increase}% increase expected based on current trends`;
                } else {
                    trendElement.textContent = `${Math.abs(increase)}% decrease expected based on current trends`;
                }
            }

            createCharts() {
                this.createSpendingChart();
                this.createCategoryChart();
            }

            createSpendingChart() {
                const ctx = document.getElementById('spendingChart').getContext('2d');
                
                // Generate daily spending data
                const dailyData = this.generateDailySpendingData();
                
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: dailyData.labels,
                        datasets: [{
                            label: 'Daily Spending',
                            data: dailyData.amounts,
                            borderColor: 'rgb(102, 126, 234)',
                            backgroundColor: 'rgba(102, 126, 234, 0.1)',
                            tension: 0.4,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    color: 'rgba(0,0,0,0.1)'
                                }
                            },
                            x: {
                                grid: {
                                    color: 'rgba(0,0,0,0.1)'
                                }
                            }
                        }
                    }
                });
            }

            createCategoryChart() {
                const ctx = document.getElementById('categoryChart').getContext('2d');
                
                const categoryTotals = this.calculateCategoryTotals();
                
                new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: Object.keys(categoryTotals).map(cat => this.getCategoryName(cat)),
                        datasets: [{
                            data: Object.values(categoryTotals),
                            backgroundColor: [
                                '#FF6B6B',
                                '#4ECDC4',
                                '#45B7D1',
                                '#96CEB4',
                                '#FFEAA7',
                                '#DDA0DD'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }

            generateDailySpendingData() {
                const last7Days = [];
                const amounts = [];
                
                for (let i = 6; i >= 0; i--) {
                    const date = new Date();
                    date.setDate(date.getDate() - i);
                    last7Days.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));
                    
                    // Simulate daily spending with some randomness
                    const baseAmount = 50 + Math.random() * 100;
                    amounts.push(Math.round(baseAmount));
                }
                
                return { labels: last7Days, amounts };
            }

            calculateCategoryTotals() {
                const totals = {};
                this.expenses.forEach(expense => {
                    totals[expense.category] = (totals[expense.category] || 0) + expense.amount;
                });
                return totals;
            }

            updateCharts() {
                // Recreate charts with updated data
                document.getElementById('spendingChart').remove();
                document.getElementById('categoryChart').remove();
                
                const spendingCanvas = document.createElement('canvas');
                spendingCanvas.id = 'spendingChart';
                spendingCanvas.width = 400;
                spendingCanvas.height = 200;
                document.querySelector('.chart-section').appendChild(spendingCanvas);
                
                const categoryCanvas = document.createElement('canvas');
                categoryCanvas.id = 'categoryChart';
                categoryCanvas.width = 400;
                categoryCanvas.height = 200;
                document.querySelector('.chart-section:last-child').appendChild(categoryCanvas);
                
                this.createCharts();
            }

            checkAlerts() {
                // Check for budget alerts
                const categoryTotals = this.calculateCategoryTotals();
                const alertsContainer = document.querySelector('.alerts-section');
                
                // Clear existing alerts except the default ones
                const existingAlerts = alertsContainer.querySelectorAll('.alert-item');
                existingAlerts.forEach(alert => {
                    if (!alert.textContent.includes('Budget Alert:') && 
                        !alert.textContent.includes('Unusual Spending:')) {
                        alert.remove();
                    }
                });

                // Add new budget alerts
                Object.entries(categoryTotals).forEach(([category, amount]) => {
                    const budget = this.budgets[category];
                    if (budget && amount > budget * 0.9) {
                        const alertDiv = document.createElement('div');
                        alertDiv.className = amount > budget ? 'alert-item danger' : 'alert-item warning';
                        alertDiv.innerHTML = `<strong>Budget Alert:</strong> ${this.getCategoryName(category)} spending at ${Math.round((amount/budget)*100)}% of budget.`;
                        alertsContainer.appendChild(alertDiv);
                    }
                });
            }
        }

        // Initialize the AI Financial Dashboard
        document.addEventListener('DOMContentLoaded', () => {
            new FinancialAI();
        });
    </script>
</body>
</html>
